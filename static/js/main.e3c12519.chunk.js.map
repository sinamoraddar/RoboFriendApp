{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","react_default","a","createElement","className","alt","src","concat","this","props","input","id","name","email","Component","CardList","_ref","robots","map","currentValue","index","src_Card","key","SearchBox","type","placeholder","onChange","searchChange","Scroll","style","overflowY","height","border","children","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchField","target","value","state","_this2","fetch","then","response","json","users","_this3","filteredRobots","filter","robot","toLowerCase","includes","length","src_SearchBox","src_Scroll","src_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAceA,mLAXb,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mDACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,YAAYC,IAAG,wBAAAC,OAA0BC,KAAKC,MAAMC,MAAMC,GAA3C,cACxBV,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAKK,KAAKC,MAAMC,MAAME,MACtBX,EAAAC,EAAAC,cAAA,SAAIK,KAAKC,MAAMC,MAAMG,gBAPPC,aCYJC,EAXC,SAAAC,GAAY,IAAVC,EAAUD,EAAVC,OACjB,OACChB,EAAAC,EAAAC,cAAA,WACAc,EAAOC,IAAI,SAACC,EAAaC,GACzB,OAAQnB,EAAAC,EAAAC,cAACkB,EAAD,CACNC,IAAKH,EAAaR,GAClBD,MAAOS,QCKII,mLATL,OAAOtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAC9BH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mCAAmCoB,KAAK,SAASC,YAAY,gBAC9EC,SAAUlB,KAAKC,MAAMkB,uBAJCb,aCOTc,EAPD,SAACnB,GACd,OACCR,EAAAC,EAAAC,cAAA,OAAK0B,MAAO,CAACC,UAAW,SAASC,OAAO,QAAQC,OAAO,oBACtDvB,EAAMwB,WCoCMC,cAnCd,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA5B,KAAA0B,IACZC,EAAAC,OAAAE,EAAA,EAAAF,CAAA5B,KAAA4B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAhC,QAaDiC,eAAe,SAACC,GACfP,EAAKQ,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAbxCX,EAAKY,MAAM,CACV9B,OAAO,GACP2B,YAAY,IAJDT,mFAOM,IAAAa,EAAAxC,KAClByC,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SACzBF,KAAK,SAAAG,GAAQL,EAAKL,SAAS,CAC3B1B,OAAOoC,uCAMD,IAAAC,EAAA9C,KACD+C,EAAe/C,KAAKuC,MAAM9B,OAAOuC,OAAO,SAAAC,GAC7C,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASL,EAAKP,MAAMH,YAAYc,iBAEjE,OAA6B,GAA1BlD,KAAKuC,MAAM9B,OAAO2C,OACb3D,EAAAC,EAAAC,cAAA,wBACKF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAC5BH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,KAAKO,GAAG,UAAtB,eACAV,EAAAC,EAAAC,cAAC0D,EAAD,CAAWjB,YAAapC,KAAKuC,MAAMH,YAAajB,aAAcnB,KAAKiC,iBACnExC,EAAAC,EAAAC,cAAC2D,EAAD,KACA7D,EAAAC,EAAAC,cAAC4D,EAAD,CAAUpD,GAAG,WAAWM,OAAQsC,aA5BhBzC,aCOEkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOrE,EAAAC,EAAAC,cAACoE,EAAD,MACbC,SAASC,eAAe,SDwHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.e3c12519.chunk.js","sourcesContent":["import React,{Component}from 'react';\r\nclass Card extends Component{\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"tc bg-light-green dib bw2 shadow-5 ma3 br3 grow\">\r\n\t\t\t\t<img alt=\"roboPhoto\" src={`https://robohash.org/${this.props.input.id}?200*200`}/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{this.props.input.name}</h2>\r\n\t\t\t\t\t<p>{this.props.input.email}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList =({robots})=>{\r\n\treturn(\r\n\t\t<div>\r\n\t{robots.map((currentValue,index)=> {\r\n\t\treturn (<Card \r\n\t\t\t\tkey={currentValue.id} \r\n\t\t\t\tinput={currentValue}/>);\r\n\t})}\r\n\t</div>\r\n\t\t);\r\n}\r\nexport default CardList;","import React ,{Component}from 'react';\r\n\r\nclass SearchBox extends Component{\r\n\r\n\trender(){return(<div className='pa2'>\r\n\t\t<input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='Search Robots'\r\n\t\tonChange={this.props.searchChange}/>\r\n\t\t\r\n\t\t</div>);\r\n}\r\n\t\r\n\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll =(props)=>{\r\n\treturn(\r\n\t\t<div style={{overflowY: 'scroll',height:'500px',border:'5px solid black'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport CardList from './CardList'\r\n// import {robots} from './robots';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll';\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state={\r\n\t\t\trobots:[],\r\n\t\t\tsearchField:''\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=> response.json())\r\n\t\t.then(users=>{this.setState({\r\n\t\t\trobots:users\r\n\t\t})})\r\n\t}\r\n\tonSearchChange=(event)=>{\r\n\t\tthis.setState({searchField:event.target.value})\r\n\t}\r\n\trender(){\r\n\t\tconst filteredRobots=this.state.robots.filter(robot=>{\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n\t\t})\r\n\t\tif(this.state.robots.length==0){\r\n\t\t\treturn <h1>Loading...</h1>\r\n\t\t}else{return(<div className='tc'>\r\n\t\t<h1 className=\"f1\" id=\"header\">RoboFriends</h1>\r\n\t\t<SearchBox searchField={this.state.searchField} searchChange={this.onSearchChange}/>\r\n\t\t<Scroll>\r\n\t\t<CardList id=\"cardList\" robots={filteredRobots}/>\r\n\t\t</Scroll>\r\n\t\t</div>);}\r\n\t\t\r\n\t}\r\n\t\r\n\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// import {robots} from './robots';\nReactDOM.render(<App/>\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}