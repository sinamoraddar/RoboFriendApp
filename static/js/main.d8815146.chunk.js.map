{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","robots","isPending","error","Card","react_default","a","createElement","className","alt","src","concat","this","props","input","id","name","email","Component","CardList","_ref","map","currentValue","index","components_Card","key","SearchBox","type","placeholder","onChange","searchChange","Scroll","style","overflowY","height","border","children","ErrorBoundry","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","hasError","info","setState","App","onRequestRobots","_this$props","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","serachRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d8815146.chunk.js","sourcesContent":["import {\r\n\tCHANGE_SEARCHFIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED}from './constants.js';\r\n\r\n\r\nconst initialStateSearch={\r\n\tsearchField:''\r\n}\r\n\r\nexport const serachRobots=(state=initialStateSearch,action={})=>{\r\n\tswitch (action.type) {\r\n\t\tcase CHANGE_SEARCHFIELD:\r\n\t\t\treturn {...state,searchField:action.payload}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t\t\t\r\n\t}\r\n}\r\nconst initialStateRobots={\r\n\trobots:[],\r\n\tisPending:false,\r\n\terror:''\r\n}\r\nexport const requestRobots =(state=initialStateRobots,action={})=>{\r\n\tswitch(action.type)\r\n\t\t{\r\n\t\t\tcase REQUEST_ROBOTS_PENDING :\r\n\t\t\t\treturn Object.assign({},state,{isPending:true})\r\n\t\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\t\treturn Object.assign({},state,{robots:action.payload,isPending:false})\r\n\t\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\t\treturn Object.assign({},state,{error:action.payload,isPending:false})\r\n\t\t\tdefault :\r\n\t\t\t\treturn state;\r\n\t\t}\r\n}","import React,{Component}from 'react';\r\nclass Card extends Component{\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"tc bg-light-green dib bw2 shadow-5 ma3 br3 grow\">\r\n\t\t\t\t<img alt=\"roboPhoto\" src={`https://robohash.org/${this.props.input.id}?200*200`}/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{this.props.input.name}</h2>\r\n\t\t\t\t\t<p>{this.props.input.email}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList =({robots})=>{\r\n\treturn(\r\n\t\t<div>\r\n\t{robots.map((currentValue,index)=> {\r\n\t\treturn (<Card \r\n\t\t\t\tkey={currentValue.id} \r\n\t\t\t\tinput={currentValue}/>);\r\n\t})}\r\n\t</div>\r\n\t\t);\r\n}\r\nexport default CardList;","import React ,{Component}from 'react';\r\n\r\nclass SearchBox extends Component{\r\n\r\n\t\r\n\trender(){return(<div className='pa2'>\r\n\t\t<input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='Search Robots'\r\n\t\tonChange={this.props.searchChange}/>\r\n\t\t\r\n\t\t</div>);\r\n}\r\n\t\r\n\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll =(props)=>{\r\n\treturn(\r\n\t\t<div style={{overflowY: 'scroll',height:'500px',border:'5px solid black'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\thasError:false\r\n\t\t}\r\n\t}\r\n\tcomponentDidCatch(error,info){\r\n\t\t\tthis.setState({hasError:true});\r\n\t\t}\r\n\t\trender(){\r\n\t\t\tif(this.state.hasError){\r\n\t\t\t\treturn <h1>oops something went wrong</h1>\r\n\t\t\t}else {\r\n\t\t\t\treturn this.props.children;\r\n\t\t\t}\r\n\t\t}\r\n}\r\nexport default ErrorBoundry;","import React,{Component} from 'react';\r\nimport {connect}from 'react-redux';\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport {setSearchField,requestRobots} from '../actions';\r\n\r\nconst mapStateToProps=(state)=>{\r\n\treturn {\r\n\t\tsearchField:state.serachRobots.searchField,\r\n\t\trobots:state.requestRobots.robots,\r\n\t\tisPending:state.requestRobots.isPending,\r\n\t\terror:state.requestRobots.error\r\n\t}\r\n}\r\nconst mapDispatchToProps=(dispatch)=>{\r\n\treturn{\r\n\t\tonSearchChange:(event)=>dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots:()=>dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component{\r\n\t\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender(){\r\n\t\t// const{robots}=this.state;\r\n\t\tconst{searchField,onSearchChange,robots,isPending}=this.props;\r\n\t\tconst filteredRobots=robots.filter(robot=>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t})\r\n\t\treturn(isPending)?\r\n\t\t\t <h1>Loading...</h1>\r\n\t\t:(<div className='tc'>\r\n\t\t<h1 className=\"f1\" id=\"header\">RoboFriends</h1>\r\n\t\t<SearchBox searchField={searchField} searchChange={onSearchChange}/>\r\n\t\t<Scroll>\r\n\t\t<ErrorBoundry>\r\n\t\t<CardList id=\"cardList\" robots={filteredRobots}/>\r\n\t\t</ErrorBoundry>\r\n\t\t</Scroll>\r\n\t\t</div>);}\r\n\t\t\r\n\t}\r\n\t\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import {\r\n\tCHANGE_SEARCHFIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED}from './constants.js';\r\n\r\nexport const setSearchField=(text)=>({\r\n\ttype:CHANGE_SEARCHFIELD,\r\n\tpayload:text\r\n});\r\nexport const requestRobots=()=>(dispatch)=>{\r\n\tdispatch({type:REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=> response.json())\r\n\t\t.then(data=>dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data}))\r\n\t\t.catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED,payload:error}))\r\n}","export const CHANGE_SEARCHFIELD='CHANGE_SEARCHFIELD';\r\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport {serachRobots,requestRobots} from './reducers';\nimport thunkMiddleware from 'redux-thunk';\n// import Card from './Card';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// import {robots} from './robots';\nconst rootReducer=combineReducers({serachRobots,requestRobots})\nconst logger=createLogger();\nconst store=\ncreateStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\n\nReactDOM.render(<Provider store={store}>\n\t<App />\n\t</Provider>\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}