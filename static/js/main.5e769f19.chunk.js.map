{"version":3,"sources":["reducers.js","components/Card.js","components/StarWars.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","robots","starwars","isPending","error","Card","react_default","a","createElement","className","alt","src","concat","this","props","input","id","name","email","Component","StarWars","created","CardList","_ref","tempStarWars","results","map","currentValue","index","components_StarWars","key","components_Card","item","SearchBox","type","placeholder","onChange","searchChange","Scroll","style","overflowY","height","border","children","ErrorBoundry","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","hasError","info","setState","App","onRequestRobots","onStarWars","_this$props","onSearchChange","console","log","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","serachRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5e769f19.chunk.js","sourcesContent":["import {\r\n\tCHANGE_SEARCHFIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED,\r\n\tREQUEST_STARWARS_PENDING,\r\n\tREQUEST_STARWARS_SUCCESS,\r\n \tREQUEST_STARWARS_FAILED\r\n\t\t\t}from './constants.js';\r\n\r\n\r\nconst initialStateSearch={\r\n\tsearchField:''\r\n}\r\n\r\nexport const serachRobots=(state=initialStateSearch,action={})=>{\r\n\tswitch (action.type) {\r\n\t\tcase CHANGE_SEARCHFIELD:\r\n\t\t\treturn {...state,searchField:action.payload}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t\t\t\r\n\t}\r\n}\r\nconst initialStateRobots={\r\n\trobots:[],\r\n\tstarwars:[],\r\n\tisPending:false,\r\n\terror:''\r\n}\r\nexport const requestRobots =(state=initialStateRobots,action={})=>{\r\n\tswitch(action.type)\r\n\t\t{\r\n\t\t\tcase REQUEST_ROBOTS_PENDING :\r\n\t\t\t\treturn Object.assign({},state,{isPending:true})\r\n\t\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\t\treturn Object.assign({},state,{robots:action.payload,isPending:false})\r\n\t\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\t\treturn Object.assign({},state,{error:action.payload,isPending:false})\r\n\t\t\tcase REQUEST_STARWARS_PENDING :\r\n\t\t\t\treturn Object.assign({},state,{isPending:true})\r\n\t\t\tcase REQUEST_STARWARS_SUCCESS:\r\n\t\t\t\treturn Object.assign({},state,{starwars:action.payload,isPending:false})\r\n\t\t\tcase REQUEST_STARWARS_FAILED:\r\n\t\t\t\treturn Object.assign({},state,{error:action.payload,isPending:false})\r\n\t\t\tdefault :\r\n\t\t\t\treturn state;\r\n\t\t}\r\n}","import React,{Component}from 'react';\r\nclass Card extends Component{\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"tc bg-light-green dib bw2 shadow-5 ma3 br3 grow\">\r\n\t\t\t\t<img alt=\"roboPhoto\" src={`https://robohash.org/${this.props.input.id}?200*200`}/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{this.props.input.name}</h2>\r\n\t\t\t\t\t<p>{this.props.input.email}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\nexport default Card;","import React,{Component}from 'react';\r\nclass StarWars extends Component{\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"tc bg-light-green dib bw2 shadow-5 ma3 br3 grow\">\r\n\t\t\t\t\r\n\t\t\t\t<img alt=\"roboPhoto\" src={`https://robohash.org/${this.props.input.created}?200*200`}/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{this.props.input.name}</h2>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\nexport default StarWars;","import React from 'react';\r\nimport Card from './Card';\r\nimport StarWars from './StarWars.js';\r\nconst CardList =({robots,starwars})=>{\r\n\tlet tempStarWars=[];\r\n\tif(starwars.results){\r\n\t\ttempStarWars= starwars.results.map((currentValue,index)=> {\r\n\t\treturn (<StarWars\r\n\t\t\t\tkey={currentValue.created} \r\n\t\t\t\tinput={currentValue}/>);})\r\n\t}\r\n\treturn(\r\n\t\t<div>\r\n\t{robots.map((currentValue,index)=> {\r\n\t\treturn (<Card \r\n\t\t\t\tkey={currentValue.id} \r\n\t\t\t\tinput={currentValue}/>);\r\n\t})}\r\n\t{\t\r\n\t\ttempStarWars.map((item)=>\r\n\t\t\titem\r\n\t\t\t)\r\n\t}</div>)}\r\n\r\n\t\r\n\t\t\r\n\r\nexport default CardList;","import React ,{Component}from 'react';\r\n\r\nclass SearchBox extends Component{\r\n\r\n\t\r\n\trender(){return(<div className='pa2'>\r\n\t\t<input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='Search Robots'\r\n\t\tonChange={this.props.searchChange}/>\r\n\t\t\r\n\t\t</div>);\r\n}\r\n\t\r\n\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll =(props)=>{\r\n\treturn(\r\n\t\t<div style={{overflowY: 'scroll',height:'500px',border:'5px solid black'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\thasError:false\r\n\t\t}\r\n\t}\r\n\tcomponentDidCatch(error,info){\r\n\t\t\tthis.setState({hasError:true});\r\n\t\t}\r\n\t\trender(){\r\n\t\t\tif(this.state.hasError){\r\n\t\t\t\treturn <h1>oops something went wrong</h1>\r\n\t\t\t}else {\r\n\t\t\t\treturn this.props.children;\r\n\t\t\t}\r\n\t\t}\r\n}\r\nexport default ErrorBoundry;","import React,{Component} from 'react';\r\nimport {connect}from 'react-redux';\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport {setSearchField,requestRobots,requestStarwars} from '../actions';\r\n\r\nconst mapStateToProps=(state)=>{\r\n\treturn {\r\n\t\tsearchField:state.serachRobots.searchField,\r\n\t\trobots:state.requestRobots.robots,\r\n\t\tstarwars:state.requestRobots.starwars,\r\n\t\tisPending:state.requestRobots.isPending,\r\n\t\terror:state.requestRobots.error\r\n\t}\r\n}\r\nconst mapDispatchToProps=(dispatch)=>{\r\n\treturn{\r\n\t\tonSearchChange:(event)=>dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots:()=>dispatch(requestRobots()),\r\n\t\tonStarWars:()=>dispatch(requestStarwars())\r\n\t}\r\n}\r\n\r\nclass App extends Component{\r\n\t\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots();\r\n\t\tthis.props.onStarWars();\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst{searchField,onSearchChange,robots,isPending,starwars}=this.props;\r\n\t\t// console.log(robots,'askljfajkdsl')\r\n\t\tconsole.log(starwars,'askljfaj156116kdsl')\r\n\t\tconst filteredRobots=robots.filter(robot=>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t})\r\n\t\treturn(isPending)?\r\n\t\t\t <h1>Loading...</h1>\r\n\t\t:(<div className='tc'>\r\n\t\t<h1 className=\"f1\" id=\"header\">RoboFriends</h1>\r\n\t\t<SearchBox searchField={searchField} searchChange={onSearchChange}/>\r\n\t\t<Scroll>\r\n\t\t<ErrorBoundry>\r\n\t\t<CardList id=\"cardList\" robots={filteredRobots} starwars={starwars}/>\r\n\t\t</ErrorBoundry>\r\n\t\t</Scroll>\r\n\t\t</div>);}\r\n\t\t\r\n\t}\r\n\t\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import {\r\n\tCHANGE_SEARCHFIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED,\r\n\tREQUEST_STARWARS_PENDING,\r\n\tREQUEST_STARWARS_SUCCESS,\r\n \tREQUEST_STARWARS_FAILED\r\n\t\t\t}from './constants.js';\r\n\r\nexport const setSearchField=(text)=>({\r\n\ttype:CHANGE_SEARCHFIELD,\r\n\tpayload:text\r\n});\r\nexport const requestRobots=()=>(dispatch)=>{\r\n\tdispatch({type:REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=> response.json())\r\n\t\t.then(data=>dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data}))\r\n\t\t.catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED,payload:error}))\r\n}\r\nexport const requestStarwars=()=>(dispatch)=>{\r\n\tdispatch({type:REQUEST_STARWARS_PENDING});\r\n\tfetch(`https://swapi.co/api/people/?format=json`)\r\n\t.then(response=>response.json())\r\n\t.then(data=>dispatch({type:REQUEST_STARWARS_SUCCESS,payload:data}))\r\n\t.catch(error=>dispatch({type:REQUEST_STARWARS_FAILED,payload:error}))\r\n\r\n\r\n\r\n\r\n}","export const CHANGE_SEARCHFIELD='CHANGE_SEARCHFIELD';\r\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';\r\nexport const REQUEST_STARWARS_PENDING='REQUEST_STARWARS_PENDING';\r\nexport const REQUEST_STARWARS_SUCCESS='REQUEST_STARWARS_SUCCESS';\r\nexport const REQUEST_STARWARS_FAILED='REQUEST_STARWARS_FAILED';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\r\nimport {createLogger} from 'redux-logger';\r\nimport {serachRobots,requestRobots} from './reducers';\r\nimport thunkMiddleware from 'redux-thunk';\r\n// import Card from './Card';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n// import {robots} from './robots';\r\nconst rootReducer=combineReducers({serachRobots,requestRobots})\r\nconst logger=createLogger();\r\nconst store=\r\ncreateStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\r\n\r\nReactDOM.render(<Provider store={store}>\r\n\t<App />\r\n\t</Provider>\r\n\t, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}